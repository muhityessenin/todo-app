definitions:
  handler.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
  todo.Task:
    properties:
      activeAt:
        type: string
      id:
        type: string
      status:
        type: string
      title:
        type: string
    required:
    - activeAt
    - title
    type: object
  todo.TaskInput:
    properties:
      activeAt:
        type: string
      status:
        type: string
      title:
        type: string
    required:
    - activeAt
    - title
    type: object
info:
  contact: {}
paths:
  /api/todo-list/tasks:
    get:
      description: Get all tasks or filter by status
      parameters:
      - description: Filter by status
        enum:
        - done
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/todo.Task'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Get tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task with the provided details
      parameters:
      - description: Task Details
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/todo.TaskInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Create a new task
      tags:
      - tasks
  /api/todo-list/tasks/{id}:
    delete:
      description: Delete a task using its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Delete a task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task's details
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task object
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/todo.TaskInput'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handler.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Update a task
      tags:
      - tasks
  /api/todo-list/tasks/{id}/done:
    put:
      description: Mark a task as done by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Mark a task as done
      tags:
      - tasks
swagger: "2.0"
